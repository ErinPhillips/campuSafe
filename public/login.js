 // Import the functions you need from the SDKs you need
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries
import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.10.0/firebase-app.js';
import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'https://www.gstatic.com/firebasejs/9.10.0/firebase-auth.js';
import { getFirestore, doc, setDoc, updateDoc, Timestamp} from 'https://www.gstatic.com/firebasejs/9.10.0/firebase-firestore.js';

// Your web app's Firebase configuration
const firebaseConfig = {
    apiKey: "AIzaSyA2VlnfV-C4zfSxPb5IL6A_EGKQUpOcRNM",
    authDomain: "campusafe-a2b00.firebaseapp.com",
    databaseURL: "https://campusafe-a2b00-default-rtdb.firebaseio.com",
    projectId: "campusafe-a2b00",
    storageBucket: "campusafe-a2b00.appspot.com",
    messagingSenderId: "25832027624",
    appId: "1:25832027624:web:9e497054e1cf41df91205d"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
// Initialize Firebase Authentication and get a reference to the service
const auth = getAuth(app);
// Initialize Firestore Database and get a reference to the service
const db = getFirestore(app);

// create error message
function setFormMessage(formElement, type, message) {
    const messageElement = formElement.querySelector(".form__message");

    messageElement.textContent = message;
    messageElement.classList.remove("form__message--success", "form__message--error");
    messageElement.classList.add(`form__message--${type}`);
}

function setInputError(inputElement, message) {
    inputElement.classList.add("form__input--error");
    inputElement.parentElement.querySelector(".form__input-error-message").textContent = message;
}

function clearInputError(inputElement) {
    inputElement.classList.remove("form__input--error");
    inputElement.parentElement.querySelector(".form__input-error-message").textContent = "";
}

// event listener for the links to login or create account page
document.addEventListener("DOMContentLoaded", () => {
    const loginForm = document.querySelector("#login"); //the login button
    const createAccountForm = document.querySelector("#createAccount"); // the create account button

    // event listener for "need to create account?" link
    document.querySelector("#linkCreateAccount").addEventListener("click", e => {
        e.preventDefault();
        loginForm.classList.add("form--hidden");
        createAccountForm.classList.remove("form--hidden");
    });

    // event listener for "already have an account? sign in" link
    document.querySelector("#linkLogin").addEventListener("click", e => {
        e.preventDefault();
        loginForm.classList.remove("form--hidden");
        createAccountForm.classList.add("form--hidden");
    });

    // event listener for creating account or login button
    loginForm.addEventListener("submit", e => {
        e.preventDefault();
        var email = document.getElementById('email').value; //extract email from form
        var password = document.getElementById('password').value; //extract password from form
        signInWithEmailAndPassword(auth, email, password) // imported firebase method for authentication of credentials
            .then(async (userCredential) => {
                // Signed in
                const uid = userCredential.user.uid; // extract the UID generated by firebase authentication
                // update last login in database
                const docRef = doc(db, "Users", uid)
                await updateDoc(docRef, {
                    lastLogin: Timestamp.now()
                });
                // Redirect to home page
                location.replace("./index.html");         
            })
            .catch((error) => {
                const errorCode = error.code;
                const errorMessage = error.message;
                // sign in failed
                setFormMessage(loginForm, "error", "Invalid username/password combination");
            });
    });

    // Sign up with email and password
    createAccountForm.addEventListener("submit", async e => {
        e.preventDefault();
        var first = document.getElementById('firstName').value;
        var last = document.getElementById('lastName').value;
        var email = document.getElementById('email').value;
        var password = document.getElementById('password').value;
        createUserWithEmailAndPassword(auth, email, password)
            .then(async (userCredential) => {
            // Registered successfuly
            const uid = userCredential.user.uid;
            await setDoc(doc(db, "Users", uid), {
                // add to DB, get user info
                firstName: first,
                lastName: last,
                email: email,
                dateCreated: Timestamp.now(),
                lastLogin: Timestamp.now()
            })
            // redirect to login page
            console.log("doc created");
            location.replace("./login.html");
        })
            .catch((error) => {
                const errorCode = error.code;
                const errorMessage = error.message;
                // registration failed
                setFormMessage(createAccountForm, "error", "Account Creation Failed.");
            });
        });
    });
